// automatically generated by the FlatBuffers compiler, do not modify

package FlatBufs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Announcement struct {
	_tab flatbuffers.Table
}

func GetRootAsAnnouncement(buf []byte, offset flatbuffers.UOffsetT) *Announcement {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Announcement{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Announcement) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Announcement) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Announcement) AnnId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Announcement) MutateAnnId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Announcement) AnnTitle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Announcement) AnnText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Announcement) AnnDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Announcement) AnnActive() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Announcement) MutateAnnActive(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func AnnouncementStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AnnouncementAddAnnId(builder *flatbuffers.Builder, AnnId int32) {
	builder.PrependInt32Slot(0, AnnId, 0)
}
func AnnouncementAddAnnTitle(builder *flatbuffers.Builder, AnnTitle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(AnnTitle), 0)
}
func AnnouncementAddAnnText(builder *flatbuffers.Builder, AnnText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(AnnText), 0)
}
func AnnouncementAddAnnDate(builder *flatbuffers.Builder, AnnDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(AnnDate), 0)
}
func AnnouncementAddAnnActive(builder *flatbuffers.Builder, AnnActive byte) {
	builder.PrependByteSlot(4, AnnActive, 0)
}
func AnnouncementEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
